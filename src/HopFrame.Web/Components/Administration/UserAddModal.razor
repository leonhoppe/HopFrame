@rendermode InteractiveServer

@using BlazorStrap
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using BlazorStrap.Shared.Components.Modal
@using BlazorStrap.V5
@using CurrieTechnologies.Razor.SweetAlert2
@using HopFrame.Database.Models
@using HopFrame.Database.Repositories
@using HopFrame.Security.Claims
@using HopFrame.Web.Model

<BSModal DataId="add-user-modal" HideOnValidSubmit="true" IsStaticBackdrop="true" OnShow="() => _user = new()" @ref="_modal">
    <BSForm Model="_user" OnValidSubmit="AddUser">
        <BSModalHeader>Add user</BSModalHeader>
        <BSModalContent>
            <div class="mb-3">
                <BSLabel>E-Mail</BSLabel>
                <BSInput InputType="InputType.Email" @bind-Value="_user.Email" required/>
            </div>
            
            <div class="mb-3">
                <BSLabel>Username</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_user.Username" required/>
            </div>
            
            <div class="mb-3">
                <BSLabel>Password</BSLabel>
                <BSInput InputType="InputType.Password" @bind-Value="_user.Password" required/>
            </div>
            
            <div class="mb-3">
                <BSLabel>Primary group</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="_user.Group">
                    <option value="">Select group</option>
                    
                    @foreach (var group in _allGroups) {
                        <option value="@group.Name">@group.Name.Replace("group.", "")</option>
                    }
                </BSInput>
            </div>
        </BSModalContent>
        <BSModalFooter>
            <BSButton Target="add-user-modal">Cancel</BSButton>
            <BSButton IsSubmit="true" Color="BSColor.Primary">Save</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>

@inject IUserRepository Users
@inject IPermissionRepository Permissions
@inject IGroupRepository Groups
@inject SweetAlertService Alerts
@inject ITokenContext Auth

@code {
    [Parameter] public Func<Task> ReloadPage { get; set; }

    private IList<PermissionGroup> _allGroups = new List<PermissionGroup>();
    private IList<User> _allUsers = new List<User>();
    private UserAdd _user;

    private BSModalBase _modal;

    public async Task ShowAsync() {
        _allGroups = await Groups.GetPermissionGroups();
        _allUsers = await Users.GetUsers();
        
        await _modal.ShowAsync();
    }

    private async Task AddUser() {
        if (!(await Permissions.HasPermission(Auth.User, Security.AdminPermissions.AddUser))) {
            await NoAddPermissions();
            return;
        }
        
        string errorMessage = null;
        
        if (_allUsers.Any(user => user.Username == _user.Username)) {
            errorMessage = "Username is already taken!";
        }
        else if (_allUsers.Any(user => user.Email == _user.Email)) {
            errorMessage = "E-Mail is already taken!";
        }
        else if (!_user.PasswordIsValid) {
            errorMessage = "The password needs to be at least 8 characters long!";
        }
        else if (!_user.EmailIsValid) {
            errorMessage = "Invalid E-Mail address!";
        }
        else if (string.IsNullOrWhiteSpace(_user.Username)) {
            errorMessage = "You need to set a username!";
        }

        if (!string.IsNullOrWhiteSpace(errorMessage)) {
            await Alerts.FireAsync(new SweetAlertOptions {
                Title = "Something went wrong!",
                Text = errorMessage,
                Icon = SweetAlertIcon.Error,
                ShowConfirmButton = false,
                Timer = 1500
            });
            
            return;
        }
        
        var user = await Users.AddUser(new User {
            Username = _user.Username,
            Email = _user.Email,
            Password = _user.Password
        });

        if (!string.IsNullOrWhiteSpace(_user.Group)) {
            await Permissions.AddPermission(user, _user.Group);
        }

        await ReloadPage.Invoke();

        await Alerts.FireAsync(new SweetAlertOptions {
            Title = "New user added!",
            Icon = SweetAlertIcon.Success,
            ShowConfirmButton = false,
            Timer = 1500

        });
    }
    
    private async Task NoAddPermissions() {
        await Alerts.FireAsync(new SweetAlertOptions {
            Title = "Unauthorized!",
            Text = "You don't have the required permissions to add a user!",
            Icon = SweetAlertIcon.Error
        });
    }
}